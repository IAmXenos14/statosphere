# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Stat-O-Sphere"

tagline: "Send your bots into...the Stat-O-Sphere!\n(Give 'em variables and junk)"

creator_notes: "
This is a stage for creating custom variables and rules for stat-tracking or behavior implementation. 
_Up front, this is pretty experimental and I'm still playing with it, so it could be unstable._ 
But it could also be fun to play with as-is.
<br>
<br>
The stage is comprised of four core, configurable elements:<br>
<ul>
<li>Variable definitions with per-turn, post-input, and post-response assignment options<br>
<li>Zero-shot classification rules to use inference on inputs and responses and apply updates to variables as a result<br>
<li>A stat-block to display after bot responses<br>
<li>Rules to apply post-history prompt instructions based on your variables<br>
</ul>
<br>
**Example Applications**<br>
This stage has no default configuration and will do nothing on its own. However, through configuration, a wide variety of effects are possible:<br>
<ul>
<li>Stat tracking and display: use inference to roughly gauge changes present in the input or response and translate that into a number to apply to stats<br>
<li>Scenario escalation tracking: use perTurnUpdate to increase a turn variable and prompt rules to feed updated scenario data as time marches on<br>
<li>Rule or behavior reinforcement: remind the LLM of your bot's quirks when the user's input should trigger them<br>
<li>Probably all kinds of other creative applications<br>
</ul>
<br>
<br>
**Guide**<br>
There's a lot to cover here, but I have not had time to do so yet. For the moment, please see my example bots and the configuration of the stage on those bots.
<br>
<br>
**Inference Details**<br>
This stage makes API calls to a Hugging Face backend that I have set up to leverage a zero-shot classification model. 
If this backend is unavailable or some other error occurs in calling it, the stage will swap to applying a very small local zero-shot model. 
Chub's stage timeout is pretty short and that can cause the stage to make a second call or give up entirely if these calls take too long. 
This is hopefully something that will be more addressable in the future.
"

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'UNLISTED'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
tags:
 - 'Stage'
 - 'Utility'
 - 'Stats'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
# source: input/response/both
config_schema:
  title: Stat-O-Sphere Settings
  type: object
  properties:
    variableConfig:
      title: Variable Configuration
      description: A JSON array of variable definitions in one disgusting line.
      type: string
      value: >
        []
    classifierConfig:
      title: Classifier Configuration
      description: A JSON array of classification rules in one disgusting line.
      type: string
      value: >
        []
    promptConfig:
      title: Prompt Configuration
      description: A JSON array of rules for prompt additions.
      type: string
      value: >
        []
    displayMessage:
      title: Display Message
      description: Markdown-formatted system message to display after bot responses.
      type: string
      value: ""
    debugMode:
      title: Debug Mode
      description: Leave disabled unless you don't care about stability.
      type: boolean
      value: false

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/statosphere'


extension_id: 'statosphere-3704059fdd7e'

