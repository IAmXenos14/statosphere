# All of these fields are optional, as is this file itself,
#   in which case these values can be managed in the UI.

# The name of the stage.
project_name: "Statosphere"

creator_notes: "
Statosphere is a stage for creating custom stat-tracking for bots. It is comprised of three core elements:<br>
<ul>
<li>Variable definitions and rules for per-intput and/or per-response changes, including zero-shot classification rules<br>
<li>Stat-block definition to display after bot responses<br>
<li>Rules to apply different post-history prompt instructions based on your variables<br>
</ul>
<br>
**Example Applications**<br>
This stage does nothing by default, but through configuration, a wide variety of effects are possible:<br>
<ul>
<li>Health tracking and display: track and display health or other stats and how they are affected by events<br>
<li>Scenario escalation tracking: track scenario progress and provide escalating prompts to the LLM<br>
<li>Rule or behavior reinforcement: remind the LLM of behavior rules if an input appears to violate it<br>
<li>Probably all kinds of creative applications<br>
</ul>
<br>

"

# A short tagline to show in search.
tagline: "Implement stats and variables for your bots."

# 'PUBLIC', 'PRIVATE', or 'UNLISTED'.
visibility: 'UNLISTED'

# 'ADJACENT' | 'NONE' | 'COVER' | 'FULLSCREEN'
# 'ADJACENT' is default. The frame will display on the side of the
#   chat on desktop and above/in the top half of the chat on mobile.
# 'NONE' will not display, only run.
# 'COVER' will, indeed, cover the chat history completely,
#   but leave the text input box.
# 'FULLSCREEN' will make nothing below the header bar
#   show except for your stage.
position: 'NONE'

# Self-explanatory.
# tags:
#  - 'Stage'
#  - 'Admin'
#  - 'Template'
#  - 'Base'

# The schema of any user-supplied config.
# If your stage requires a configuration but has no
#   defined schema, it won't work.
# source: input/response/both
config_schema:
  title: Statosphere Settings
  type: object
  properties:
    variableConfig:
      title: Variable Configuration
      description: A JSON array of variable definitions in one disgusting line.
      type: string
      value: >
        [{
        "name": "wishes",
        "initialValue": 3
        },{
        "name": "timeSinceWish",
        "initialValue": 0,
        "perTurnSetter": "{{timeSinceWish}} + 1"
        },{
        "name": "madeWish",
        "initialValue": false,
        "perTurnSetter": false
        },{
        "name": "fakeWish",
        "initialValue": false,
        "perTurnSetter": false
        },{
        "name": "saidName",
        "initialValue": false,
        "perTurnSetter": false
        }]
    classifierConfig:
      title: Classifier Configuration
      description: A JSON array of classification rules in one disgusting line.
      type: string
      value: >
        [{
        "name": "Input Check",
        "inputHypothesis": "The narrator is {{user}}. {{user}} is {}.",
        "classifications":
          [{
            "label": "making a proper wish by saying the words 'I wish' and providing details",
            "category": "wish",
            "threshold": 0.7,
            "updates": 
            {
              "wishes": "max(0, {{wishes}} - 1)",
              "madeWish": "true",
              "timeSinceWish": "0"
            }
          },{
            "label": "only talking about making a wish",
            "category": "wish",
            "threshold": 0.8,
            "updates":
            {
              "fakeWish": "true"
            }
          },{
            "label": "saying '{{char}}'s full name",
            "category": "name",
            "threshold": 0.6,
            "updates":
            {
              "saidName": "true"
            }
          }]
        }]
    promptConfig:
      title: Prompt Configuration
      description: A JSON array of rules for prompt additions.
      type: string
      value: >
        [{
          "condition": "{{saidName}} and not ({{madeWish}} or {{fakeWish}})",
          "prompt": "{{user}} may have said {{char}}'s full name; she might have a poor reaction."
        },{
          "condition": "{{madeWish}}",
          "prompt": "{{user}} appears to have made a proper wish, {{char}} should definitely 'grant' it."
        },{
          "condition": "{{fakeWish}}",
          "prompt": "{{user}} may have almost made a wish there, {{char}} should remind them to make it a proper wish--or just taunt them a bit."
        },{
          "condition": "{{timeSinceWish}} > 10 and {{wishes}} > 0",
          "prompt": "{{char}} really wants {{user}} to make a wish and is growing impatient."
        },{
          "condition": "{{wishes}} == 0 and not {{madeWish}}",
          "prompt": "{{user}} is out of wishes. {{char}} no longer owes them anything, but may choose to stick around."
        }]
    displayMessage:
      title: Display Message
      description: Markdown-formatted system message to display after bot responses.
      type: string
      value: "`Wishes remaining: {{wishes}}`"

# The schema of the state that you store.
# This isn't needed even if you do store state,
#   and is here more for future use cases to
#   optimize storage.
state_schema:
  init:
    type: object
    properties:
      grid:
        type: string
  message:
    type: object
    properties:
      angry:
        type: boolean
        default: true
  chat:
    type: object
    properties:
      visited:
        type: array
        items:
          type: integer

# Whether to publish as 'Anonymous' instead of under your username.
# is_anonymous: false

# Self-explanatory.
# ratings_disabled: false

# This is here for future cases where ex. you need user secrets,
#    but currently does nothing.
# permissions:

# extension_id is automatically generated on push with a new project;
#    you should not make or set this value.
# github_path will be added if it does not exist. It is the URL of the repo.


github_path: 'https://github.com/Lord-Raven/statosphere'


extension_id: 'statosphere-3704059fdd7e'

